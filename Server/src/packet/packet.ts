/**
 * Generated by the protoc-gen-ts.  DO NOT EDIT!
 * compiler version: 3.21.12
 * source: packet.proto
 * git: https://github.com/thesayyn/protoc-gen-ts */
import * as pb_1 from "google-protobuf";
export namespace impelDown {
    export enum MSGID {
        S_INIT = 0,
        C_MATCH_MAKING = 20,
        C_CREATE_ROOM = 21,
        S_CREATE_ROOM = 22,
        C_JOIN_ROOM = 23,
        S_JOIN_ROOM = 24,
        C_EXIT_ROOM = 25,
        S_EXIT_ROOM = 26,
        C_REFRESH_ROOMLIST = 27,
        S_REFRESH_ROOMLIST = 28,
        C_GAME_START = 31,
        S_GAME_START = 32,
        C_MAGICIAN_SKILL = 40,
        S_MAGICIAN_SKILL = 41,
        C_ROBOT_SKILL = 42,
        S_ROBOT_SKILL = 43,
        C_HUNTER_SKILL = 44,
        S_HUNTER_SKILL = 45,
        C_NINJA_SKILL = 46,
        S_NINJA_SKILL = 47,
        C_PIRATE_SKILL = 48,
        S_PIRATE_SKILL = 49,
        C_RACCOON_SKILL = 50,
        S_RACCOON_SKILL = 51,
        C_WEREWOLF = 52,
        S_WEREWOLF = 53
    }
    export class PlayerInfo extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            playerId?: number;
            playerName?: string;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("playerId" in data && data.playerId != undefined) {
                    this.playerId = data.playerId;
                }
                if ("playerName" in data && data.playerName != undefined) {
                    this.playerName = data.playerName;
                }
            }
        }
        get playerId() {
            return pb_1.Message.getFieldWithDefault(this, 1, 0) as number;
        }
        set playerId(value: number) {
            pb_1.Message.setField(this, 1, value);
        }
        get playerName() {
            return pb_1.Message.getFieldWithDefault(this, 2, "") as string;
        }
        set playerName(value: string) {
            pb_1.Message.setField(this, 2, value);
        }
        static fromObject(data: {
            playerId?: number;
            playerName?: string;
        }): PlayerInfo {
            const message = new PlayerInfo({});
            if (data.playerId != null) {
                message.playerId = data.playerId;
            }
            if (data.playerName != null) {
                message.playerName = data.playerName;
            }
            return message;
        }
        toObject() {
            const data: {
                playerId?: number;
                playerName?: string;
            } = {};
            if (this.playerId != null) {
                data.playerId = this.playerId;
            }
            if (this.playerName != null) {
                data.playerName = this.playerName;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.playerId != 0)
                writer.writeInt32(1, this.playerId);
            if (this.playerName.length)
                writer.writeString(2, this.playerName);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): PlayerInfo {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new PlayerInfo();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.playerId = reader.readInt32();
                        break;
                    case 2:
                        message.playerName = reader.readString();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): PlayerInfo {
            return PlayerInfo.deserialize(bytes);
        }
    }
    export class Position extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            x?: number;
            y?: number;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("x" in data && data.x != undefined) {
                    this.x = data.x;
                }
                if ("y" in data && data.y != undefined) {
                    this.y = data.y;
                }
            }
        }
        get x() {
            return pb_1.Message.getFieldWithDefault(this, 1, 0) as number;
        }
        set x(value: number) {
            pb_1.Message.setField(this, 1, value);
        }
        get y() {
            return pb_1.Message.getFieldWithDefault(this, 2, 0) as number;
        }
        set y(value: number) {
            pb_1.Message.setField(this, 2, value);
        }
        static fromObject(data: {
            x?: number;
            y?: number;
        }): Position {
            const message = new Position({});
            if (data.x != null) {
                message.x = data.x;
            }
            if (data.y != null) {
                message.y = data.y;
            }
            return message;
        }
        toObject() {
            const data: {
                x?: number;
                y?: number;
            } = {};
            if (this.x != null) {
                data.x = this.x;
            }
            if (this.y != null) {
                data.y = this.y;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.x != 0)
                writer.writeFloat(1, this.x);
            if (this.y != 0)
                writer.writeFloat(2, this.y);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): Position {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new Position();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.x = reader.readFloat();
                        break;
                    case 2:
                        message.y = reader.readFloat();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): Position {
            return Position.deserialize(bytes);
        }
    }
    export class S_Init extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            playerId?: number;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("playerId" in data && data.playerId != undefined) {
                    this.playerId = data.playerId;
                }
            }
        }
        get playerId() {
            return pb_1.Message.getFieldWithDefault(this, 1, 0) as number;
        }
        set playerId(value: number) {
            pb_1.Message.setField(this, 1, value);
        }
        static fromObject(data: {
            playerId?: number;
        }): S_Init {
            const message = new S_Init({});
            if (data.playerId != null) {
                message.playerId = data.playerId;
            }
            return message;
        }
        toObject() {
            const data: {
                playerId?: number;
            } = {};
            if (this.playerId != null) {
                data.playerId = this.playerId;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.playerId != 0)
                writer.writeInt32(1, this.playerId);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): S_Init {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new S_Init();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.playerId = reader.readInt32();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): S_Init {
            return S_Init.deserialize(bytes);
        }
    }
    export class RoomInfo extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            roomIndex?: number;
            hostPlayer?: PlayerInfo;
            maxPeople?: number;
            currentPeople?: number;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("roomIndex" in data && data.roomIndex != undefined) {
                    this.roomIndex = data.roomIndex;
                }
                if ("hostPlayer" in data && data.hostPlayer != undefined) {
                    this.hostPlayer = data.hostPlayer;
                }
                if ("maxPeople" in data && data.maxPeople != undefined) {
                    this.maxPeople = data.maxPeople;
                }
                if ("currentPeople" in data && data.currentPeople != undefined) {
                    this.currentPeople = data.currentPeople;
                }
            }
        }
        get roomIndex() {
            return pb_1.Message.getFieldWithDefault(this, 1, 0) as number;
        }
        set roomIndex(value: number) {
            pb_1.Message.setField(this, 1, value);
        }
        get hostPlayer() {
            return pb_1.Message.getWrapperField(this, PlayerInfo, 2) as PlayerInfo;
        }
        set hostPlayer(value: PlayerInfo) {
            pb_1.Message.setWrapperField(this, 2, value);
        }
        get has_hostPlayer() {
            return pb_1.Message.getField(this, 2) != null;
        }
        get maxPeople() {
            return pb_1.Message.getFieldWithDefault(this, 3, 0) as number;
        }
        set maxPeople(value: number) {
            pb_1.Message.setField(this, 3, value);
        }
        get currentPeople() {
            return pb_1.Message.getFieldWithDefault(this, 4, 0) as number;
        }
        set currentPeople(value: number) {
            pb_1.Message.setField(this, 4, value);
        }
        static fromObject(data: {
            roomIndex?: number;
            hostPlayer?: ReturnType<typeof PlayerInfo.prototype.toObject>;
            maxPeople?: number;
            currentPeople?: number;
        }): RoomInfo {
            const message = new RoomInfo({});
            if (data.roomIndex != null) {
                message.roomIndex = data.roomIndex;
            }
            if (data.hostPlayer != null) {
                message.hostPlayer = PlayerInfo.fromObject(data.hostPlayer);
            }
            if (data.maxPeople != null) {
                message.maxPeople = data.maxPeople;
            }
            if (data.currentPeople != null) {
                message.currentPeople = data.currentPeople;
            }
            return message;
        }
        toObject() {
            const data: {
                roomIndex?: number;
                hostPlayer?: ReturnType<typeof PlayerInfo.prototype.toObject>;
                maxPeople?: number;
                currentPeople?: number;
            } = {};
            if (this.roomIndex != null) {
                data.roomIndex = this.roomIndex;
            }
            if (this.hostPlayer != null) {
                data.hostPlayer = this.hostPlayer.toObject();
            }
            if (this.maxPeople != null) {
                data.maxPeople = this.maxPeople;
            }
            if (this.currentPeople != null) {
                data.currentPeople = this.currentPeople;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.roomIndex != 0)
                writer.writeInt32(1, this.roomIndex);
            if (this.has_hostPlayer)
                writer.writeMessage(2, this.hostPlayer, () => this.hostPlayer.serialize(writer));
            if (this.maxPeople != 0)
                writer.writeInt32(3, this.maxPeople);
            if (this.currentPeople != 0)
                writer.writeInt32(4, this.currentPeople);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): RoomInfo {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new RoomInfo();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.roomIndex = reader.readInt32();
                        break;
                    case 2:
                        reader.readMessage(message.hostPlayer, () => message.hostPlayer = PlayerInfo.deserialize(reader));
                        break;
                    case 3:
                        message.maxPeople = reader.readInt32();
                        break;
                    case 4:
                        message.currentPeople = reader.readInt32();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): RoomInfo {
            return RoomInfo.deserialize(bytes);
        }
    }
    export class C_Match_Making extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            playerId?: number;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("playerId" in data && data.playerId != undefined) {
                    this.playerId = data.playerId;
                }
            }
        }
        get playerId() {
            return pb_1.Message.getFieldWithDefault(this, 1, 0) as number;
        }
        set playerId(value: number) {
            pb_1.Message.setField(this, 1, value);
        }
        static fromObject(data: {
            playerId?: number;
        }): C_Match_Making {
            const message = new C_Match_Making({});
            if (data.playerId != null) {
                message.playerId = data.playerId;
            }
            return message;
        }
        toObject() {
            const data: {
                playerId?: number;
            } = {};
            if (this.playerId != null) {
                data.playerId = this.playerId;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.playerId != 0)
                writer.writeInt32(1, this.playerId);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): C_Match_Making {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new C_Match_Making();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.playerId = reader.readInt32();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): C_Match_Making {
            return C_Match_Making.deserialize(bytes);
        }
    }
    export class C_Create_Room extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            playerId?: number;
            maxPeople?: number;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("playerId" in data && data.playerId != undefined) {
                    this.playerId = data.playerId;
                }
                if ("maxPeople" in data && data.maxPeople != undefined) {
                    this.maxPeople = data.maxPeople;
                }
            }
        }
        get playerId() {
            return pb_1.Message.getFieldWithDefault(this, 1, 0) as number;
        }
        set playerId(value: number) {
            pb_1.Message.setField(this, 1, value);
        }
        get maxPeople() {
            return pb_1.Message.getFieldWithDefault(this, 2, 0) as number;
        }
        set maxPeople(value: number) {
            pb_1.Message.setField(this, 2, value);
        }
        static fromObject(data: {
            playerId?: number;
            maxPeople?: number;
        }): C_Create_Room {
            const message = new C_Create_Room({});
            if (data.playerId != null) {
                message.playerId = data.playerId;
            }
            if (data.maxPeople != null) {
                message.maxPeople = data.maxPeople;
            }
            return message;
        }
        toObject() {
            const data: {
                playerId?: number;
                maxPeople?: number;
            } = {};
            if (this.playerId != null) {
                data.playerId = this.playerId;
            }
            if (this.maxPeople != null) {
                data.maxPeople = this.maxPeople;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.playerId != 0)
                writer.writeInt32(1, this.playerId);
            if (this.maxPeople != 0)
                writer.writeInt32(2, this.maxPeople);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): C_Create_Room {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new C_Create_Room();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.playerId = reader.readInt32();
                        break;
                    case 2:
                        message.maxPeople = reader.readInt32();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): C_Create_Room {
            return C_Create_Room.deserialize(bytes);
        }
    }
    export class S_Create_Room extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {}) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") { }
        }
        static fromObject(data: {}): S_Create_Room {
            const message = new S_Create_Room({});
            return message;
        }
        toObject() {
            const data: {} = {};
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): S_Create_Room {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new S_Create_Room();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): S_Create_Room {
            return S_Create_Room.deserialize(bytes);
        }
    }
    export class C_Join_Room extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {}) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") { }
        }
        static fromObject(data: {}): C_Join_Room {
            const message = new C_Join_Room({});
            return message;
        }
        toObject() {
            const data: {} = {};
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): C_Join_Room {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new C_Join_Room();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): C_Join_Room {
            return C_Join_Room.deserialize(bytes);
        }
    }
    export class S_Join_Room extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {}) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") { }
        }
        static fromObject(data: {}): S_Join_Room {
            const message = new S_Join_Room({});
            return message;
        }
        toObject() {
            const data: {} = {};
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): S_Join_Room {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new S_Join_Room();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): S_Join_Room {
            return S_Join_Room.deserialize(bytes);
        }
    }
    export class C_Exit_Room extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {}) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") { }
        }
        static fromObject(data: {}): C_Exit_Room {
            const message = new C_Exit_Room({});
            return message;
        }
        toObject() {
            const data: {} = {};
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): C_Exit_Room {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new C_Exit_Room();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): C_Exit_Room {
            return C_Exit_Room.deserialize(bytes);
        }
    }
    export class S_Exit_Room extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {}) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") { }
        }
        static fromObject(data: {}): S_Exit_Room {
            const message = new S_Exit_Room({});
            return message;
        }
        toObject() {
            const data: {} = {};
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): S_Exit_Room {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new S_Exit_Room();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): S_Exit_Room {
            return S_Exit_Room.deserialize(bytes);
        }
    }
    export class C_Refresh_RoomList extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {}) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") { }
        }
        static fromObject(data: {}): C_Refresh_RoomList {
            const message = new C_Refresh_RoomList({});
            return message;
        }
        toObject() {
            const data: {} = {};
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): C_Refresh_RoomList {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new C_Refresh_RoomList();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): C_Refresh_RoomList {
            return C_Refresh_RoomList.deserialize(bytes);
        }
    }
    export class S_Refresh_RoomList extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            roomInfo?: RoomInfo;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("roomInfo" in data && data.roomInfo != undefined) {
                    this.roomInfo = data.roomInfo;
                }
            }
        }
        get roomInfo() {
            return pb_1.Message.getWrapperField(this, RoomInfo, 1) as RoomInfo;
        }
        set roomInfo(value: RoomInfo) {
            pb_1.Message.setWrapperField(this, 1, value);
        }
        get has_roomInfo() {
            return pb_1.Message.getField(this, 1) != null;
        }
        static fromObject(data: {
            roomInfo?: ReturnType<typeof RoomInfo.prototype.toObject>;
        }): S_Refresh_RoomList {
            const message = new S_Refresh_RoomList({});
            if (data.roomInfo != null) {
                message.roomInfo = RoomInfo.fromObject(data.roomInfo);
            }
            return message;
        }
        toObject() {
            const data: {
                roomInfo?: ReturnType<typeof RoomInfo.prototype.toObject>;
            } = {};
            if (this.roomInfo != null) {
                data.roomInfo = this.roomInfo.toObject();
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.has_roomInfo)
                writer.writeMessage(1, this.roomInfo, () => this.roomInfo.serialize(writer));
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): S_Refresh_RoomList {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new S_Refresh_RoomList();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        reader.readMessage(message.roomInfo, () => message.roomInfo = RoomInfo.deserialize(reader));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): S_Refresh_RoomList {
            return S_Refresh_RoomList.deserialize(bytes);
        }
    }
}
