/**
 * Generated by the protoc-gen-ts.  DO NOT EDIT!
 * compiler version: 3.21.12
 * source: packet.proto
 * git: https://github.com/thesayyn/protoc-gen-ts */
import * as pb_1 from "google-protobuf";
export namespace impelDown {
    export enum MSGID {
        S_INIT = 0,
        C_ENTER = 1,
        S_ENTER = 2
    }
    export class PlayerInfo extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            playerId?: number;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("playerId" in data && data.playerId != undefined) {
                    this.playerId = data.playerId;
                }
            }
        }
        get playerId() {
            return pb_1.Message.getFieldWithDefault(this, 1, 0) as number;
        }
        set playerId(value: number) {
            pb_1.Message.setField(this, 1, value);
        }
        static fromObject(data: {
            playerId?: number;
        }): PlayerInfo {
            const message = new PlayerInfo({});
            if (data.playerId != null) {
                message.playerId = data.playerId;
            }
            return message;
        }
        toObject() {
            const data: {
                playerId?: number;
            } = {};
            if (this.playerId != null) {
                data.playerId = this.playerId;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.playerId != 0)
                writer.writeInt32(1, this.playerId);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): PlayerInfo {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new PlayerInfo();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.playerId = reader.readInt32();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): PlayerInfo {
            return PlayerInfo.deserialize(bytes);
        }
    }
    export class S_Init extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            playerInfo?: PlayerInfo;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("playerInfo" in data && data.playerInfo != undefined) {
                    this.playerInfo = data.playerInfo;
                }
            }
        }
        get playerInfo() {
            return pb_1.Message.getWrapperField(this, PlayerInfo, 1) as PlayerInfo;
        }
        set playerInfo(value: PlayerInfo) {
            pb_1.Message.setWrapperField(this, 1, value);
        }
        get has_playerInfo() {
            return pb_1.Message.getField(this, 1) != null;
        }
        static fromObject(data: {
            playerInfo?: ReturnType<typeof PlayerInfo.prototype.toObject>;
        }): S_Init {
            const message = new S_Init({});
            if (data.playerInfo != null) {
                message.playerInfo = PlayerInfo.fromObject(data.playerInfo);
            }
            return message;
        }
        toObject() {
            const data: {
                playerInfo?: ReturnType<typeof PlayerInfo.prototype.toObject>;
            } = {};
            if (this.playerInfo != null) {
                data.playerInfo = this.playerInfo.toObject();
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.has_playerInfo)
                writer.writeMessage(1, this.playerInfo, () => this.playerInfo.serialize(writer));
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): S_Init {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new S_Init();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        reader.readMessage(message.playerInfo, () => message.playerInfo = PlayerInfo.deserialize(reader));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): S_Init {
            return S_Init.deserialize(bytes);
        }
    }
    export class C_Enter extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            playerInfo?: PlayerInfo;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("playerInfo" in data && data.playerInfo != undefined) {
                    this.playerInfo = data.playerInfo;
                }
            }
        }
        get playerInfo() {
            return pb_1.Message.getWrapperField(this, PlayerInfo, 1) as PlayerInfo;
        }
        set playerInfo(value: PlayerInfo) {
            pb_1.Message.setWrapperField(this, 1, value);
        }
        get has_playerInfo() {
            return pb_1.Message.getField(this, 1) != null;
        }
        static fromObject(data: {
            playerInfo?: ReturnType<typeof PlayerInfo.prototype.toObject>;
        }): C_Enter {
            const message = new C_Enter({});
            if (data.playerInfo != null) {
                message.playerInfo = PlayerInfo.fromObject(data.playerInfo);
            }
            return message;
        }
        toObject() {
            const data: {
                playerInfo?: ReturnType<typeof PlayerInfo.prototype.toObject>;
            } = {};
            if (this.playerInfo != null) {
                data.playerInfo = this.playerInfo.toObject();
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.has_playerInfo)
                writer.writeMessage(1, this.playerInfo, () => this.playerInfo.serialize(writer));
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): C_Enter {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new C_Enter();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        reader.readMessage(message.playerInfo, () => message.playerInfo = PlayerInfo.deserialize(reader));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): C_Enter {
            return C_Enter.deserialize(bytes);
        }
    }
    export class S_Enter extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            playerInfo?: PlayerInfo;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("playerInfo" in data && data.playerInfo != undefined) {
                    this.playerInfo = data.playerInfo;
                }
            }
        }
        get playerInfo() {
            return pb_1.Message.getWrapperField(this, PlayerInfo, 1) as PlayerInfo;
        }
        set playerInfo(value: PlayerInfo) {
            pb_1.Message.setWrapperField(this, 1, value);
        }
        get has_playerInfo() {
            return pb_1.Message.getField(this, 1) != null;
        }
        static fromObject(data: {
            playerInfo?: ReturnType<typeof PlayerInfo.prototype.toObject>;
        }): S_Enter {
            const message = new S_Enter({});
            if (data.playerInfo != null) {
                message.playerInfo = PlayerInfo.fromObject(data.playerInfo);
            }
            return message;
        }
        toObject() {
            const data: {
                playerInfo?: ReturnType<typeof PlayerInfo.prototype.toObject>;
            } = {};
            if (this.playerInfo != null) {
                data.playerInfo = this.playerInfo.toObject();
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.has_playerInfo)
                writer.writeMessage(1, this.playerInfo, () => this.playerInfo.serialize(writer));
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): S_Enter {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new S_Enter();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        reader.readMessage(message.playerInfo, () => message.playerInfo = PlayerInfo.deserialize(reader));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): S_Enter {
            return S_Enter.deserialize(bytes);
        }
    }
}
