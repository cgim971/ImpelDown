/**
 * Generated by the protoc-gen-ts.  DO NOT EDIT!
 * compiler version: 3.21.12
 * source: packet.proto
 * git: https://github.com/thesayyn/protoc-gen-ts */
import * as pb_1 from "google-protobuf";
export namespace impelDown {
    export enum MSGID {
        S_INIT = 0
    }
    export class PlayerInfo extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            playerId?: number;
            roomIndex?: number;
            characterIndex?: number;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("playerId" in data && data.playerId != undefined) {
                    this.playerId = data.playerId;
                }
                if ("roomIndex" in data && data.roomIndex != undefined) {
                    this.roomIndex = data.roomIndex;
                }
                if ("characterIndex" in data && data.characterIndex != undefined) {
                    this.characterIndex = data.characterIndex;
                }
            }
        }
        get playerId() {
            return pb_1.Message.getFieldWithDefault(this, 1, 0) as number;
        }
        set playerId(value: number) {
            pb_1.Message.setField(this, 1, value);
        }
        get roomIndex() {
            return pb_1.Message.getFieldWithDefault(this, 2, 0) as number;
        }
        set roomIndex(value: number) {
            pb_1.Message.setField(this, 2, value);
        }
        get characterIndex() {
            return pb_1.Message.getFieldWithDefault(this, 3, 0) as number;
        }
        set characterIndex(value: number) {
            pb_1.Message.setField(this, 3, value);
        }
        static fromObject(data: {
            playerId?: number;
            roomIndex?: number;
            characterIndex?: number;
        }): PlayerInfo {
            const message = new PlayerInfo({});
            if (data.playerId != null) {
                message.playerId = data.playerId;
            }
            if (data.roomIndex != null) {
                message.roomIndex = data.roomIndex;
            }
            if (data.characterIndex != null) {
                message.characterIndex = data.characterIndex;
            }
            return message;
        }
        toObject() {
            const data: {
                playerId?: number;
                roomIndex?: number;
                characterIndex?: number;
            } = {};
            if (this.playerId != null) {
                data.playerId = this.playerId;
            }
            if (this.roomIndex != null) {
                data.roomIndex = this.roomIndex;
            }
            if (this.characterIndex != null) {
                data.characterIndex = this.characterIndex;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.playerId != 0)
                writer.writeInt32(1, this.playerId);
            if (this.roomIndex != 0)
                writer.writeInt32(2, this.roomIndex);
            if (this.characterIndex != 0)
                writer.writeInt32(3, this.characterIndex);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): PlayerInfo {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new PlayerInfo();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.playerId = reader.readInt32();
                        break;
                    case 2:
                        message.roomIndex = reader.readInt32();
                        break;
                    case 3:
                        message.characterIndex = reader.readInt32();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): PlayerInfo {
            return PlayerInfo.deserialize(bytes);
        }
    }
    export class PlayerData extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            playerId?: PlayerInfo;
            position?: Position;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("playerId" in data && data.playerId != undefined) {
                    this.playerId = data.playerId;
                }
                if ("position" in data && data.position != undefined) {
                    this.position = data.position;
                }
            }
        }
        get playerId() {
            return pb_1.Message.getWrapperField(this, PlayerInfo, 1) as PlayerInfo;
        }
        set playerId(value: PlayerInfo) {
            pb_1.Message.setWrapperField(this, 1, value);
        }
        get has_playerId() {
            return pb_1.Message.getField(this, 1) != null;
        }
        get position() {
            return pb_1.Message.getWrapperField(this, Position, 2) as Position;
        }
        set position(value: Position) {
            pb_1.Message.setWrapperField(this, 2, value);
        }
        get has_position() {
            return pb_1.Message.getField(this, 2) != null;
        }
        static fromObject(data: {
            playerId?: ReturnType<typeof PlayerInfo.prototype.toObject>;
            position?: ReturnType<typeof Position.prototype.toObject>;
        }): PlayerData {
            const message = new PlayerData({});
            if (data.playerId != null) {
                message.playerId = PlayerInfo.fromObject(data.playerId);
            }
            if (data.position != null) {
                message.position = Position.fromObject(data.position);
            }
            return message;
        }
        toObject() {
            const data: {
                playerId?: ReturnType<typeof PlayerInfo.prototype.toObject>;
                position?: ReturnType<typeof Position.prototype.toObject>;
            } = {};
            if (this.playerId != null) {
                data.playerId = this.playerId.toObject();
            }
            if (this.position != null) {
                data.position = this.position.toObject();
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.has_playerId)
                writer.writeMessage(1, this.playerId, () => this.playerId.serialize(writer));
            if (this.has_position)
                writer.writeMessage(2, this.position, () => this.position.serialize(writer));
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): PlayerData {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new PlayerData();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        reader.readMessage(message.playerId, () => message.playerId = PlayerInfo.deserialize(reader));
                        break;
                    case 2:
                        reader.readMessage(message.position, () => message.position = Position.deserialize(reader));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): PlayerData {
            return PlayerData.deserialize(bytes);
        }
    }
    export class PlayerPosData extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            position?: Position;
            flipX?: boolean;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("position" in data && data.position != undefined) {
                    this.position = data.position;
                }
                if ("flipX" in data && data.flipX != undefined) {
                    this.flipX = data.flipX;
                }
            }
        }
        get position() {
            return pb_1.Message.getWrapperField(this, Position, 1) as Position;
        }
        set position(value: Position) {
            pb_1.Message.setWrapperField(this, 1, value);
        }
        get has_position() {
            return pb_1.Message.getField(this, 1) != null;
        }
        get flipX() {
            return pb_1.Message.getFieldWithDefault(this, 2, false) as boolean;
        }
        set flipX(value: boolean) {
            pb_1.Message.setField(this, 2, value);
        }
        static fromObject(data: {
            position?: ReturnType<typeof Position.prototype.toObject>;
            flipX?: boolean;
        }): PlayerPosData {
            const message = new PlayerPosData({});
            if (data.position != null) {
                message.position = Position.fromObject(data.position);
            }
            if (data.flipX != null) {
                message.flipX = data.flipX;
            }
            return message;
        }
        toObject() {
            const data: {
                position?: ReturnType<typeof Position.prototype.toObject>;
                flipX?: boolean;
            } = {};
            if (this.position != null) {
                data.position = this.position.toObject();
            }
            if (this.flipX != null) {
                data.flipX = this.flipX;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.has_position)
                writer.writeMessage(1, this.position, () => this.position.serialize(writer));
            if (this.flipX != false)
                writer.writeBool(2, this.flipX);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): PlayerPosData {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new PlayerPosData();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        reader.readMessage(message.position, () => message.position = Position.deserialize(reader));
                        break;
                    case 2:
                        message.flipX = reader.readBool();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): PlayerPosData {
            return PlayerPosData.deserialize(bytes);
        }
    }
    export class Position extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            x?: number;
            y?: number;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("x" in data && data.x != undefined) {
                    this.x = data.x;
                }
                if ("y" in data && data.y != undefined) {
                    this.y = data.y;
                }
            }
        }
        get x() {
            return pb_1.Message.getFieldWithDefault(this, 1, 0) as number;
        }
        set x(value: number) {
            pb_1.Message.setField(this, 1, value);
        }
        get y() {
            return pb_1.Message.getFieldWithDefault(this, 2, 0) as number;
        }
        set y(value: number) {
            pb_1.Message.setField(this, 2, value);
        }
        static fromObject(data: {
            x?: number;
            y?: number;
        }): Position {
            const message = new Position({});
            if (data.x != null) {
                message.x = data.x;
            }
            if (data.y != null) {
                message.y = data.y;
            }
            return message;
        }
        toObject() {
            const data: {
                x?: number;
                y?: number;
            } = {};
            if (this.x != null) {
                data.x = this.x;
            }
            if (this.y != null) {
                data.y = this.y;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.x != 0)
                writer.writeFloat(1, this.x);
            if (this.y != 0)
                writer.writeFloat(2, this.y);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): Position {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new Position();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.x = reader.readFloat();
                        break;
                    case 2:
                        message.y = reader.readFloat();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): Position {
            return Position.deserialize(bytes);
        }
    }
    export class S_Init extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            playerInfo?: PlayerInfo;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("playerInfo" in data && data.playerInfo != undefined) {
                    this.playerInfo = data.playerInfo;
                }
            }
        }
        get playerInfo() {
            return pb_1.Message.getWrapperField(this, PlayerInfo, 1) as PlayerInfo;
        }
        set playerInfo(value: PlayerInfo) {
            pb_1.Message.setWrapperField(this, 1, value);
        }
        get has_playerInfo() {
            return pb_1.Message.getField(this, 1) != null;
        }
        static fromObject(data: {
            playerInfo?: ReturnType<typeof PlayerInfo.prototype.toObject>;
        }): S_Init {
            const message = new S_Init({});
            if (data.playerInfo != null) {
                message.playerInfo = PlayerInfo.fromObject(data.playerInfo);
            }
            return message;
        }
        toObject() {
            const data: {
                playerInfo?: ReturnType<typeof PlayerInfo.prototype.toObject>;
            } = {};
            if (this.playerInfo != null) {
                data.playerInfo = this.playerInfo.toObject();
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.has_playerInfo)
                writer.writeMessage(1, this.playerInfo, () => this.playerInfo.serialize(writer));
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): S_Init {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new S_Init();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        reader.readMessage(message.playerInfo, () => message.playerInfo = PlayerInfo.deserialize(reader));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): S_Init {
            return S_Init.deserialize(bytes);
        }
    }
}
