/**
 * Generated by the protoc-gen-ts.  DO NOT EDIT!
 * compiler version: 3.21.12
 * source: packet.proto
 * git: https://github.com/thesayyn/protoc-gen-ts */
import * as pb_1 from "google-protobuf";
export namespace impelDown {
    export enum MSGID {
        S_INIT = 0,
        C_PLAYER = 1,
        S_PLAYER = 2,
        C_CREATE_ROOM = 10,
        C_JOIN_ROOM = 11,
        C_EXIT_ROOM = 12,
        C_MATCH_MAKING = 13,
        S_CREATE_ROOM = 15,
        S_JOIN_ROOM = 16,
        S_EXIT_ROOM = 17,
        S_REFRESH_ROOM = 18,
        S_MATCH_MAKING = 20,
        C_ISREADY = 21,
        S_ISREADY = 22,
        C_ISLOCK = 23,
        S_ISLOCK = 24,
        C_START = 25,
        S_START = 26
    }
    export enum PlayerState {
        PLAYER_NONE = 0,
        ALIVE = 1,
        CATCHED = 2,
        GHOST = 3
    }
    export enum RoomState {
        ROOM_NONE = 0,
        LOBBY = 1,
        GAME = 2
    }
    export class PlayerInfo extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            playerId?: number;
            playerName?: string;
            roomIndex?: number;
            characterIndex?: number;
            roomInIndex?: number;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("playerId" in data && data.playerId != undefined) {
                    this.playerId = data.playerId;
                }
                if ("playerName" in data && data.playerName != undefined) {
                    this.playerName = data.playerName;
                }
                if ("roomIndex" in data && data.roomIndex != undefined) {
                    this.roomIndex = data.roomIndex;
                }
                if ("characterIndex" in data && data.characterIndex != undefined) {
                    this.characterIndex = data.characterIndex;
                }
                if ("roomInIndex" in data && data.roomInIndex != undefined) {
                    this.roomInIndex = data.roomInIndex;
                }
            }
        }
        get playerId() {
            return pb_1.Message.getFieldWithDefault(this, 1, 0) as number;
        }
        set playerId(value: number) {
            pb_1.Message.setField(this, 1, value);
        }
        get playerName() {
            return pb_1.Message.getFieldWithDefault(this, 2, "") as string;
        }
        set playerName(value: string) {
            pb_1.Message.setField(this, 2, value);
        }
        get roomIndex() {
            return pb_1.Message.getFieldWithDefault(this, 3, 0) as number;
        }
        set roomIndex(value: number) {
            pb_1.Message.setField(this, 3, value);
        }
        get characterIndex() {
            return pb_1.Message.getFieldWithDefault(this, 4, 0) as number;
        }
        set characterIndex(value: number) {
            pb_1.Message.setField(this, 4, value);
        }
        get roomInIndex() {
            return pb_1.Message.getFieldWithDefault(this, 5, 0) as number;
        }
        set roomInIndex(value: number) {
            pb_1.Message.setField(this, 5, value);
        }
        static fromObject(data: {
            playerId?: number;
            playerName?: string;
            roomIndex?: number;
            characterIndex?: number;
            roomInIndex?: number;
        }): PlayerInfo {
            const message = new PlayerInfo({});
            if (data.playerId != null) {
                message.playerId = data.playerId;
            }
            if (data.playerName != null) {
                message.playerName = data.playerName;
            }
            if (data.roomIndex != null) {
                message.roomIndex = data.roomIndex;
            }
            if (data.characterIndex != null) {
                message.characterIndex = data.characterIndex;
            }
            if (data.roomInIndex != null) {
                message.roomInIndex = data.roomInIndex;
            }
            return message;
        }
        toObject() {
            const data: {
                playerId?: number;
                playerName?: string;
                roomIndex?: number;
                characterIndex?: number;
                roomInIndex?: number;
            } = {};
            if (this.playerId != null) {
                data.playerId = this.playerId;
            }
            if (this.playerName != null) {
                data.playerName = this.playerName;
            }
            if (this.roomIndex != null) {
                data.roomIndex = this.roomIndex;
            }
            if (this.characterIndex != null) {
                data.characterIndex = this.characterIndex;
            }
            if (this.roomInIndex != null) {
                data.roomInIndex = this.roomInIndex;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.playerId != 0)
                writer.writeInt32(1, this.playerId);
            if (this.playerName.length)
                writer.writeString(2, this.playerName);
            if (this.roomIndex != 0)
                writer.writeInt32(3, this.roomIndex);
            if (this.characterIndex != 0)
                writer.writeInt32(4, this.characterIndex);
            if (this.roomInIndex != 0)
                writer.writeInt32(5, this.roomInIndex);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): PlayerInfo {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new PlayerInfo();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.playerId = reader.readInt32();
                        break;
                    case 2:
                        message.playerName = reader.readString();
                        break;
                    case 3:
                        message.roomIndex = reader.readInt32();
                        break;
                    case 4:
                        message.characterIndex = reader.readInt32();
                        break;
                    case 5:
                        message.roomInIndex = reader.readInt32();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): PlayerInfo {
            return PlayerInfo.deserialize(bytes);
        }
    }
    export class PlayerInGameData extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            playerId?: number;
            playerNmae?: string;
            playerPosData?: PlayerPosData;
            tailIndex?: number;
            playerState?: PlayerState;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("playerId" in data && data.playerId != undefined) {
                    this.playerId = data.playerId;
                }
                if ("playerNmae" in data && data.playerNmae != undefined) {
                    this.playerNmae = data.playerNmae;
                }
                if ("playerPosData" in data && data.playerPosData != undefined) {
                    this.playerPosData = data.playerPosData;
                }
                if ("tailIndex" in data && data.tailIndex != undefined) {
                    this.tailIndex = data.tailIndex;
                }
                if ("playerState" in data && data.playerState != undefined) {
                    this.playerState = data.playerState;
                }
            }
        }
        get playerId() {
            return pb_1.Message.getFieldWithDefault(this, 1, 0) as number;
        }
        set playerId(value: number) {
            pb_1.Message.setField(this, 1, value);
        }
        get playerNmae() {
            return pb_1.Message.getFieldWithDefault(this, 2, "") as string;
        }
        set playerNmae(value: string) {
            pb_1.Message.setField(this, 2, value);
        }
        get playerPosData() {
            return pb_1.Message.getWrapperField(this, PlayerPosData, 3) as PlayerPosData;
        }
        set playerPosData(value: PlayerPosData) {
            pb_1.Message.setWrapperField(this, 3, value);
        }
        get has_playerPosData() {
            return pb_1.Message.getField(this, 3) != null;
        }
        get tailIndex() {
            return pb_1.Message.getFieldWithDefault(this, 4, 0) as number;
        }
        set tailIndex(value: number) {
            pb_1.Message.setField(this, 4, value);
        }
        get playerState() {
            return pb_1.Message.getFieldWithDefault(this, 5, PlayerState.PLAYER_NONE) as PlayerState;
        }
        set playerState(value: PlayerState) {
            pb_1.Message.setField(this, 5, value);
        }
        static fromObject(data: {
            playerId?: number;
            playerNmae?: string;
            playerPosData?: ReturnType<typeof PlayerPosData.prototype.toObject>;
            tailIndex?: number;
            playerState?: PlayerState;
        }): PlayerInGameData {
            const message = new PlayerInGameData({});
            if (data.playerId != null) {
                message.playerId = data.playerId;
            }
            if (data.playerNmae != null) {
                message.playerNmae = data.playerNmae;
            }
            if (data.playerPosData != null) {
                message.playerPosData = PlayerPosData.fromObject(data.playerPosData);
            }
            if (data.tailIndex != null) {
                message.tailIndex = data.tailIndex;
            }
            if (data.playerState != null) {
                message.playerState = data.playerState;
            }
            return message;
        }
        toObject() {
            const data: {
                playerId?: number;
                playerNmae?: string;
                playerPosData?: ReturnType<typeof PlayerPosData.prototype.toObject>;
                tailIndex?: number;
                playerState?: PlayerState;
            } = {};
            if (this.playerId != null) {
                data.playerId = this.playerId;
            }
            if (this.playerNmae != null) {
                data.playerNmae = this.playerNmae;
            }
            if (this.playerPosData != null) {
                data.playerPosData = this.playerPosData.toObject();
            }
            if (this.tailIndex != null) {
                data.tailIndex = this.tailIndex;
            }
            if (this.playerState != null) {
                data.playerState = this.playerState;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.playerId != 0)
                writer.writeInt32(1, this.playerId);
            if (this.playerNmae.length)
                writer.writeString(2, this.playerNmae);
            if (this.has_playerPosData)
                writer.writeMessage(3, this.playerPosData, () => this.playerPosData.serialize(writer));
            if (this.tailIndex != 0)
                writer.writeInt32(4, this.tailIndex);
            if (this.playerState != PlayerState.PLAYER_NONE)
                writer.writeEnum(5, this.playerState);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): PlayerInGameData {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new PlayerInGameData();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.playerId = reader.readInt32();
                        break;
                    case 2:
                        message.playerNmae = reader.readString();
                        break;
                    case 3:
                        reader.readMessage(message.playerPosData, () => message.playerPosData = PlayerPosData.deserialize(reader));
                        break;
                    case 4:
                        message.tailIndex = reader.readInt32();
                        break;
                    case 5:
                        message.playerState = reader.readEnum();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): PlayerInGameData {
            return PlayerInGameData.deserialize(bytes);
        }
    }
    export class PlayerPosData extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            position?: Position;
            scaleX?: number;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("position" in data && data.position != undefined) {
                    this.position = data.position;
                }
                if ("scaleX" in data && data.scaleX != undefined) {
                    this.scaleX = data.scaleX;
                }
            }
        }
        get position() {
            return pb_1.Message.getWrapperField(this, Position, 1) as Position;
        }
        set position(value: Position) {
            pb_1.Message.setWrapperField(this, 1, value);
        }
        get has_position() {
            return pb_1.Message.getField(this, 1) != null;
        }
        get scaleX() {
            return pb_1.Message.getFieldWithDefault(this, 2, 0) as number;
        }
        set scaleX(value: number) {
            pb_1.Message.setField(this, 2, value);
        }
        static fromObject(data: {
            position?: ReturnType<typeof Position.prototype.toObject>;
            scaleX?: number;
        }): PlayerPosData {
            const message = new PlayerPosData({});
            if (data.position != null) {
                message.position = Position.fromObject(data.position);
            }
            if (data.scaleX != null) {
                message.scaleX = data.scaleX;
            }
            return message;
        }
        toObject() {
            const data: {
                position?: ReturnType<typeof Position.prototype.toObject>;
                scaleX?: number;
            } = {};
            if (this.position != null) {
                data.position = this.position.toObject();
            }
            if (this.scaleX != null) {
                data.scaleX = this.scaleX;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.has_position)
                writer.writeMessage(1, this.position, () => this.position.serialize(writer));
            if (this.scaleX != 0)
                writer.writeFloat(2, this.scaleX);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): PlayerPosData {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new PlayerPosData();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        reader.readMessage(message.position, () => message.position = Position.deserialize(reader));
                        break;
                    case 2:
                        message.scaleX = reader.readFloat();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): PlayerPosData {
            return PlayerPosData.deserialize(bytes);
        }
    }
    export class Position extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            x?: number;
            y?: number;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("x" in data && data.x != undefined) {
                    this.x = data.x;
                }
                if ("y" in data && data.y != undefined) {
                    this.y = data.y;
                }
            }
        }
        get x() {
            return pb_1.Message.getFieldWithDefault(this, 1, 0) as number;
        }
        set x(value: number) {
            pb_1.Message.setField(this, 1, value);
        }
        get y() {
            return pb_1.Message.getFieldWithDefault(this, 2, 0) as number;
        }
        set y(value: number) {
            pb_1.Message.setField(this, 2, value);
        }
        static fromObject(data: {
            x?: number;
            y?: number;
        }): Position {
            const message = new Position({});
            if (data.x != null) {
                message.x = data.x;
            }
            if (data.y != null) {
                message.y = data.y;
            }
            return message;
        }
        toObject() {
            const data: {
                x?: number;
                y?: number;
            } = {};
            if (this.x != null) {
                data.x = this.x;
            }
            if (this.y != null) {
                data.y = this.y;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.x != 0)
                writer.writeFloat(1, this.x);
            if (this.y != 0)
                writer.writeFloat(2, this.y);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): Position {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new Position();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.x = reader.readFloat();
                        break;
                    case 2:
                        message.y = reader.readFloat();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): Position {
            return Position.deserialize(bytes);
        }
    }
    export class RoomInfo extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            roomState?: RoomState;
            hostId?: number;
            hostName?: string;
            roomIndex?: number;
            mapIndex?: number;
            currentPeople?: number;
            maxPeople?: number;
            roomDatas?: RoomData[];
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [8], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("roomState" in data && data.roomState != undefined) {
                    this.roomState = data.roomState;
                }
                if ("hostId" in data && data.hostId != undefined) {
                    this.hostId = data.hostId;
                }
                if ("hostName" in data && data.hostName != undefined) {
                    this.hostName = data.hostName;
                }
                if ("roomIndex" in data && data.roomIndex != undefined) {
                    this.roomIndex = data.roomIndex;
                }
                if ("mapIndex" in data && data.mapIndex != undefined) {
                    this.mapIndex = data.mapIndex;
                }
                if ("currentPeople" in data && data.currentPeople != undefined) {
                    this.currentPeople = data.currentPeople;
                }
                if ("maxPeople" in data && data.maxPeople != undefined) {
                    this.maxPeople = data.maxPeople;
                }
                if ("roomDatas" in data && data.roomDatas != undefined) {
                    this.roomDatas = data.roomDatas;
                }
            }
        }
        get roomState() {
            return pb_1.Message.getFieldWithDefault(this, 1, RoomState.ROOM_NONE) as RoomState;
        }
        set roomState(value: RoomState) {
            pb_1.Message.setField(this, 1, value);
        }
        get hostId() {
            return pb_1.Message.getFieldWithDefault(this, 2, 0) as number;
        }
        set hostId(value: number) {
            pb_1.Message.setField(this, 2, value);
        }
        get hostName() {
            return pb_1.Message.getFieldWithDefault(this, 3, "") as string;
        }
        set hostName(value: string) {
            pb_1.Message.setField(this, 3, value);
        }
        get roomIndex() {
            return pb_1.Message.getFieldWithDefault(this, 4, 0) as number;
        }
        set roomIndex(value: number) {
            pb_1.Message.setField(this, 4, value);
        }
        get mapIndex() {
            return pb_1.Message.getFieldWithDefault(this, 5, 0) as number;
        }
        set mapIndex(value: number) {
            pb_1.Message.setField(this, 5, value);
        }
        get currentPeople() {
            return pb_1.Message.getFieldWithDefault(this, 6, 0) as number;
        }
        set currentPeople(value: number) {
            pb_1.Message.setField(this, 6, value);
        }
        get maxPeople() {
            return pb_1.Message.getFieldWithDefault(this, 7, 0) as number;
        }
        set maxPeople(value: number) {
            pb_1.Message.setField(this, 7, value);
        }
        get roomDatas() {
            return pb_1.Message.getRepeatedWrapperField(this, RoomData, 8) as RoomData[];
        }
        set roomDatas(value: RoomData[]) {
            pb_1.Message.setRepeatedWrapperField(this, 8, value);
        }
        static fromObject(data: {
            roomState?: RoomState;
            hostId?: number;
            hostName?: string;
            roomIndex?: number;
            mapIndex?: number;
            currentPeople?: number;
            maxPeople?: number;
            roomDatas?: ReturnType<typeof RoomData.prototype.toObject>[];
        }): RoomInfo {
            const message = new RoomInfo({});
            if (data.roomState != null) {
                message.roomState = data.roomState;
            }
            if (data.hostId != null) {
                message.hostId = data.hostId;
            }
            if (data.hostName != null) {
                message.hostName = data.hostName;
            }
            if (data.roomIndex != null) {
                message.roomIndex = data.roomIndex;
            }
            if (data.mapIndex != null) {
                message.mapIndex = data.mapIndex;
            }
            if (data.currentPeople != null) {
                message.currentPeople = data.currentPeople;
            }
            if (data.maxPeople != null) {
                message.maxPeople = data.maxPeople;
            }
            if (data.roomDatas != null) {
                message.roomDatas = data.roomDatas.map(item => RoomData.fromObject(item));
            }
            return message;
        }
        toObject() {
            const data: {
                roomState?: RoomState;
                hostId?: number;
                hostName?: string;
                roomIndex?: number;
                mapIndex?: number;
                currentPeople?: number;
                maxPeople?: number;
                roomDatas?: ReturnType<typeof RoomData.prototype.toObject>[];
            } = {};
            if (this.roomState != null) {
                data.roomState = this.roomState;
            }
            if (this.hostId != null) {
                data.hostId = this.hostId;
            }
            if (this.hostName != null) {
                data.hostName = this.hostName;
            }
            if (this.roomIndex != null) {
                data.roomIndex = this.roomIndex;
            }
            if (this.mapIndex != null) {
                data.mapIndex = this.mapIndex;
            }
            if (this.currentPeople != null) {
                data.currentPeople = this.currentPeople;
            }
            if (this.maxPeople != null) {
                data.maxPeople = this.maxPeople;
            }
            if (this.roomDatas != null) {
                data.roomDatas = this.roomDatas.map((item: RoomData) => item.toObject());
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.roomState != RoomState.ROOM_NONE)
                writer.writeEnum(1, this.roomState);
            if (this.hostId != 0)
                writer.writeInt32(2, this.hostId);
            if (this.hostName.length)
                writer.writeString(3, this.hostName);
            if (this.roomIndex != 0)
                writer.writeInt32(4, this.roomIndex);
            if (this.mapIndex != 0)
                writer.writeInt32(5, this.mapIndex);
            if (this.currentPeople != 0)
                writer.writeInt32(6, this.currentPeople);
            if (this.maxPeople != 0)
                writer.writeInt32(7, this.maxPeople);
            if (this.roomDatas.length)
                writer.writeRepeatedMessage(8, this.roomDatas, (item: RoomData) => item.serialize(writer));
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): RoomInfo {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new RoomInfo();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.roomState = reader.readEnum();
                        break;
                    case 2:
                        message.hostId = reader.readInt32();
                        break;
                    case 3:
                        message.hostName = reader.readString();
                        break;
                    case 4:
                        message.roomIndex = reader.readInt32();
                        break;
                    case 5:
                        message.mapIndex = reader.readInt32();
                        break;
                    case 6:
                        message.currentPeople = reader.readInt32();
                        break;
                    case 7:
                        message.maxPeople = reader.readInt32();
                        break;
                    case 8:
                        reader.readMessage(message.roomDatas, () => pb_1.Message.addToRepeatedWrapperField(message, 8, RoomData.deserialize(reader), RoomData));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): RoomInfo {
            return RoomInfo.deserialize(bytes);
        }
    }
    export class RoomData extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            isLock?: boolean;
            playerId?: number;
            playerName?: string;
            isReady?: boolean;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("isLock" in data && data.isLock != undefined) {
                    this.isLock = data.isLock;
                }
                if ("playerId" in data && data.playerId != undefined) {
                    this.playerId = data.playerId;
                }
                if ("playerName" in data && data.playerName != undefined) {
                    this.playerName = data.playerName;
                }
                if ("isReady" in data && data.isReady != undefined) {
                    this.isReady = data.isReady;
                }
            }
        }
        get isLock() {
            return pb_1.Message.getFieldWithDefault(this, 1, false) as boolean;
        }
        set isLock(value: boolean) {
            pb_1.Message.setField(this, 1, value);
        }
        get playerId() {
            return pb_1.Message.getFieldWithDefault(this, 2, 0) as number;
        }
        set playerId(value: number) {
            pb_1.Message.setField(this, 2, value);
        }
        get playerName() {
            return pb_1.Message.getFieldWithDefault(this, 3, "") as string;
        }
        set playerName(value: string) {
            pb_1.Message.setField(this, 3, value);
        }
        get isReady() {
            return pb_1.Message.getFieldWithDefault(this, 4, false) as boolean;
        }
        set isReady(value: boolean) {
            pb_1.Message.setField(this, 4, value);
        }
        static fromObject(data: {
            isLock?: boolean;
            playerId?: number;
            playerName?: string;
            isReady?: boolean;
        }): RoomData {
            const message = new RoomData({});
            if (data.isLock != null) {
                message.isLock = data.isLock;
            }
            if (data.playerId != null) {
                message.playerId = data.playerId;
            }
            if (data.playerName != null) {
                message.playerName = data.playerName;
            }
            if (data.isReady != null) {
                message.isReady = data.isReady;
            }
            return message;
        }
        toObject() {
            const data: {
                isLock?: boolean;
                playerId?: number;
                playerName?: string;
                isReady?: boolean;
            } = {};
            if (this.isLock != null) {
                data.isLock = this.isLock;
            }
            if (this.playerId != null) {
                data.playerId = this.playerId;
            }
            if (this.playerName != null) {
                data.playerName = this.playerName;
            }
            if (this.isReady != null) {
                data.isReady = this.isReady;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.isLock != false)
                writer.writeBool(1, this.isLock);
            if (this.playerId != 0)
                writer.writeInt32(2, this.playerId);
            if (this.playerName.length)
                writer.writeString(3, this.playerName);
            if (this.isReady != false)
                writer.writeBool(4, this.isReady);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): RoomData {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new RoomData();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.isLock = reader.readBool();
                        break;
                    case 2:
                        message.playerId = reader.readInt32();
                        break;
                    case 3:
                        message.playerName = reader.readString();
                        break;
                    case 4:
                        message.isReady = reader.readBool();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): RoomData {
            return RoomData.deserialize(bytes);
        }
    }
    export class S_Init extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            playerId?: number;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("playerId" in data && data.playerId != undefined) {
                    this.playerId = data.playerId;
                }
            }
        }
        get playerId() {
            return pb_1.Message.getFieldWithDefault(this, 1, 0) as number;
        }
        set playerId(value: number) {
            pb_1.Message.setField(this, 1, value);
        }
        static fromObject(data: {
            playerId?: number;
        }): S_Init {
            const message = new S_Init({});
            if (data.playerId != null) {
                message.playerId = data.playerId;
            }
            return message;
        }
        toObject() {
            const data: {
                playerId?: number;
            } = {};
            if (this.playerId != null) {
                data.playerId = this.playerId;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.playerId != 0)
                writer.writeInt32(1, this.playerId);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): S_Init {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new S_Init();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.playerId = reader.readInt32();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): S_Init {
            return S_Init.deserialize(bytes);
        }
    }
    export class C_Player extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            playerId?: number;
            playerName?: string;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("playerId" in data && data.playerId != undefined) {
                    this.playerId = data.playerId;
                }
                if ("playerName" in data && data.playerName != undefined) {
                    this.playerName = data.playerName;
                }
            }
        }
        get playerId() {
            return pb_1.Message.getFieldWithDefault(this, 1, 0) as number;
        }
        set playerId(value: number) {
            pb_1.Message.setField(this, 1, value);
        }
        get playerName() {
            return pb_1.Message.getFieldWithDefault(this, 2, "") as string;
        }
        set playerName(value: string) {
            pb_1.Message.setField(this, 2, value);
        }
        static fromObject(data: {
            playerId?: number;
            playerName?: string;
        }): C_Player {
            const message = new C_Player({});
            if (data.playerId != null) {
                message.playerId = data.playerId;
            }
            if (data.playerName != null) {
                message.playerName = data.playerName;
            }
            return message;
        }
        toObject() {
            const data: {
                playerId?: number;
                playerName?: string;
            } = {};
            if (this.playerId != null) {
                data.playerId = this.playerId;
            }
            if (this.playerName != null) {
                data.playerName = this.playerName;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.playerId != 0)
                writer.writeInt32(1, this.playerId);
            if (this.playerName.length)
                writer.writeString(2, this.playerName);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): C_Player {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new C_Player();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.playerId = reader.readInt32();
                        break;
                    case 2:
                        message.playerName = reader.readString();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): C_Player {
            return C_Player.deserialize(bytes);
        }
    }
    export class S_Player extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            playerInfo?: PlayerInfo;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("playerInfo" in data && data.playerInfo != undefined) {
                    this.playerInfo = data.playerInfo;
                }
            }
        }
        get playerInfo() {
            return pb_1.Message.getWrapperField(this, PlayerInfo, 1) as PlayerInfo;
        }
        set playerInfo(value: PlayerInfo) {
            pb_1.Message.setWrapperField(this, 1, value);
        }
        get has_playerInfo() {
            return pb_1.Message.getField(this, 1) != null;
        }
        static fromObject(data: {
            playerInfo?: ReturnType<typeof PlayerInfo.prototype.toObject>;
        }): S_Player {
            const message = new S_Player({});
            if (data.playerInfo != null) {
                message.playerInfo = PlayerInfo.fromObject(data.playerInfo);
            }
            return message;
        }
        toObject() {
            const data: {
                playerInfo?: ReturnType<typeof PlayerInfo.prototype.toObject>;
            } = {};
            if (this.playerInfo != null) {
                data.playerInfo = this.playerInfo.toObject();
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.has_playerInfo)
                writer.writeMessage(1, this.playerInfo, () => this.playerInfo.serialize(writer));
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): S_Player {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new S_Player();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        reader.readMessage(message.playerInfo, () => message.playerInfo = PlayerInfo.deserialize(reader));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): S_Player {
            return S_Player.deserialize(bytes);
        }
    }
    export class C_CreateRoom extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            playerId?: number;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("playerId" in data && data.playerId != undefined) {
                    this.playerId = data.playerId;
                }
            }
        }
        get playerId() {
            return pb_1.Message.getFieldWithDefault(this, 1, 0) as number;
        }
        set playerId(value: number) {
            pb_1.Message.setField(this, 1, value);
        }
        static fromObject(data: {
            playerId?: number;
        }): C_CreateRoom {
            const message = new C_CreateRoom({});
            if (data.playerId != null) {
                message.playerId = data.playerId;
            }
            return message;
        }
        toObject() {
            const data: {
                playerId?: number;
            } = {};
            if (this.playerId != null) {
                data.playerId = this.playerId;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.playerId != 0)
                writer.writeInt32(1, this.playerId);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): C_CreateRoom {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new C_CreateRoom();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.playerId = reader.readInt32();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): C_CreateRoom {
            return C_CreateRoom.deserialize(bytes);
        }
    }
    export class C_JoinRoom extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {}) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") { }
        }
        static fromObject(data: {}): C_JoinRoom {
            const message = new C_JoinRoom({});
            return message;
        }
        toObject() {
            const data: {} = {};
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): C_JoinRoom {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new C_JoinRoom();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): C_JoinRoom {
            return C_JoinRoom.deserialize(bytes);
        }
    }
    export class C_ExitRoom extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            playerId?: number;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("playerId" in data && data.playerId != undefined) {
                    this.playerId = data.playerId;
                }
            }
        }
        get playerId() {
            return pb_1.Message.getFieldWithDefault(this, 1, 0) as number;
        }
        set playerId(value: number) {
            pb_1.Message.setField(this, 1, value);
        }
        static fromObject(data: {
            playerId?: number;
        }): C_ExitRoom {
            const message = new C_ExitRoom({});
            if (data.playerId != null) {
                message.playerId = data.playerId;
            }
            return message;
        }
        toObject() {
            const data: {
                playerId?: number;
            } = {};
            if (this.playerId != null) {
                data.playerId = this.playerId;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.playerId != 0)
                writer.writeInt32(1, this.playerId);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): C_ExitRoom {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new C_ExitRoom();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.playerId = reader.readInt32();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): C_ExitRoom {
            return C_ExitRoom.deserialize(bytes);
        }
    }
    export class C_MatchMaking extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            playerId?: number;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("playerId" in data && data.playerId != undefined) {
                    this.playerId = data.playerId;
                }
            }
        }
        get playerId() {
            return pb_1.Message.getFieldWithDefault(this, 1, 0) as number;
        }
        set playerId(value: number) {
            pb_1.Message.setField(this, 1, value);
        }
        static fromObject(data: {
            playerId?: number;
        }): C_MatchMaking {
            const message = new C_MatchMaking({});
            if (data.playerId != null) {
                message.playerId = data.playerId;
            }
            return message;
        }
        toObject() {
            const data: {
                playerId?: number;
            } = {};
            if (this.playerId != null) {
                data.playerId = this.playerId;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.playerId != 0)
                writer.writeInt32(1, this.playerId);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): C_MatchMaking {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new C_MatchMaking();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.playerId = reader.readInt32();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): C_MatchMaking {
            return C_MatchMaking.deserialize(bytes);
        }
    }
    export class S_CreateRoom extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {}) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") { }
        }
        static fromObject(data: {}): S_CreateRoom {
            const message = new S_CreateRoom({});
            return message;
        }
        toObject() {
            const data: {} = {};
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): S_CreateRoom {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new S_CreateRoom();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): S_CreateRoom {
            return S_CreateRoom.deserialize(bytes);
        }
    }
    export class S_JoinRoom extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            isHost?: boolean;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("isHost" in data && data.isHost != undefined) {
                    this.isHost = data.isHost;
                }
            }
        }
        get isHost() {
            return pb_1.Message.getFieldWithDefault(this, 1, false) as boolean;
        }
        set isHost(value: boolean) {
            pb_1.Message.setField(this, 1, value);
        }
        static fromObject(data: {
            isHost?: boolean;
        }): S_JoinRoom {
            const message = new S_JoinRoom({});
            if (data.isHost != null) {
                message.isHost = data.isHost;
            }
            return message;
        }
        toObject() {
            const data: {
                isHost?: boolean;
            } = {};
            if (this.isHost != null) {
                data.isHost = this.isHost;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.isHost != false)
                writer.writeBool(1, this.isHost);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): S_JoinRoom {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new S_JoinRoom();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.isHost = reader.readBool();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): S_JoinRoom {
            return S_JoinRoom.deserialize(bytes);
        }
    }
    export class S_ExitRoom extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {}) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") { }
        }
        static fromObject(data: {}): S_ExitRoom {
            const message = new S_ExitRoom({});
            return message;
        }
        toObject() {
            const data: {} = {};
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): S_ExitRoom {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new S_ExitRoom();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): S_ExitRoom {
            return S_ExitRoom.deserialize(bytes);
        }
    }
    export class S_RefreshRoom extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            roomInfo?: RoomInfo;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("roomInfo" in data && data.roomInfo != undefined) {
                    this.roomInfo = data.roomInfo;
                }
            }
        }
        get roomInfo() {
            return pb_1.Message.getWrapperField(this, RoomInfo, 1) as RoomInfo;
        }
        set roomInfo(value: RoomInfo) {
            pb_1.Message.setWrapperField(this, 1, value);
        }
        get has_roomInfo() {
            return pb_1.Message.getField(this, 1) != null;
        }
        static fromObject(data: {
            roomInfo?: ReturnType<typeof RoomInfo.prototype.toObject>;
        }): S_RefreshRoom {
            const message = new S_RefreshRoom({});
            if (data.roomInfo != null) {
                message.roomInfo = RoomInfo.fromObject(data.roomInfo);
            }
            return message;
        }
        toObject() {
            const data: {
                roomInfo?: ReturnType<typeof RoomInfo.prototype.toObject>;
            } = {};
            if (this.roomInfo != null) {
                data.roomInfo = this.roomInfo.toObject();
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.has_roomInfo)
                writer.writeMessage(1, this.roomInfo, () => this.roomInfo.serialize(writer));
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): S_RefreshRoom {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new S_RefreshRoom();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        reader.readMessage(message.roomInfo, () => message.roomInfo = RoomInfo.deserialize(reader));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): S_RefreshRoom {
            return S_RefreshRoom.deserialize(bytes);
        }
    }
    export class S_MatchMaking extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {}) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") { }
        }
        static fromObject(data: {}): S_MatchMaking {
            const message = new S_MatchMaking({});
            return message;
        }
        toObject() {
            const data: {} = {};
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): S_MatchMaking {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new S_MatchMaking();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): S_MatchMaking {
            return S_MatchMaking.deserialize(bytes);
        }
    }
    export class C_IsReady extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            playerId?: number;
            isReady?: boolean;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("playerId" in data && data.playerId != undefined) {
                    this.playerId = data.playerId;
                }
                if ("isReady" in data && data.isReady != undefined) {
                    this.isReady = data.isReady;
                }
            }
        }
        get playerId() {
            return pb_1.Message.getFieldWithDefault(this, 1, 0) as number;
        }
        set playerId(value: number) {
            pb_1.Message.setField(this, 1, value);
        }
        get isReady() {
            return pb_1.Message.getFieldWithDefault(this, 2, false) as boolean;
        }
        set isReady(value: boolean) {
            pb_1.Message.setField(this, 2, value);
        }
        static fromObject(data: {
            playerId?: number;
            isReady?: boolean;
        }): C_IsReady {
            const message = new C_IsReady({});
            if (data.playerId != null) {
                message.playerId = data.playerId;
            }
            if (data.isReady != null) {
                message.isReady = data.isReady;
            }
            return message;
        }
        toObject() {
            const data: {
                playerId?: number;
                isReady?: boolean;
            } = {};
            if (this.playerId != null) {
                data.playerId = this.playerId;
            }
            if (this.isReady != null) {
                data.isReady = this.isReady;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.playerId != 0)
                writer.writeInt32(1, this.playerId);
            if (this.isReady != false)
                writer.writeBool(2, this.isReady);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): C_IsReady {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new C_IsReady();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.playerId = reader.readInt32();
                        break;
                    case 2:
                        message.isReady = reader.readBool();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): C_IsReady {
            return C_IsReady.deserialize(bytes);
        }
    }
    export class S_IsReady extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            roomInfo?: RoomInfo;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("roomInfo" in data && data.roomInfo != undefined) {
                    this.roomInfo = data.roomInfo;
                }
            }
        }
        get roomInfo() {
            return pb_1.Message.getWrapperField(this, RoomInfo, 1) as RoomInfo;
        }
        set roomInfo(value: RoomInfo) {
            pb_1.Message.setWrapperField(this, 1, value);
        }
        get has_roomInfo() {
            return pb_1.Message.getField(this, 1) != null;
        }
        static fromObject(data: {
            roomInfo?: ReturnType<typeof RoomInfo.prototype.toObject>;
        }): S_IsReady {
            const message = new S_IsReady({});
            if (data.roomInfo != null) {
                message.roomInfo = RoomInfo.fromObject(data.roomInfo);
            }
            return message;
        }
        toObject() {
            const data: {
                roomInfo?: ReturnType<typeof RoomInfo.prototype.toObject>;
            } = {};
            if (this.roomInfo != null) {
                data.roomInfo = this.roomInfo.toObject();
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.has_roomInfo)
                writer.writeMessage(1, this.roomInfo, () => this.roomInfo.serialize(writer));
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): S_IsReady {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new S_IsReady();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        reader.readMessage(message.roomInfo, () => message.roomInfo = RoomInfo.deserialize(reader));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): S_IsReady {
            return S_IsReady.deserialize(bytes);
        }
    }
    export class C_IsLock extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            playerId?: number;
            roomInIndex?: number;
            isLock?: boolean;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("playerId" in data && data.playerId != undefined) {
                    this.playerId = data.playerId;
                }
                if ("roomInIndex" in data && data.roomInIndex != undefined) {
                    this.roomInIndex = data.roomInIndex;
                }
                if ("isLock" in data && data.isLock != undefined) {
                    this.isLock = data.isLock;
                }
            }
        }
        get playerId() {
            return pb_1.Message.getFieldWithDefault(this, 1, 0) as number;
        }
        set playerId(value: number) {
            pb_1.Message.setField(this, 1, value);
        }
        get roomInIndex() {
            return pb_1.Message.getFieldWithDefault(this, 2, 0) as number;
        }
        set roomInIndex(value: number) {
            pb_1.Message.setField(this, 2, value);
        }
        get isLock() {
            return pb_1.Message.getFieldWithDefault(this, 3, false) as boolean;
        }
        set isLock(value: boolean) {
            pb_1.Message.setField(this, 3, value);
        }
        static fromObject(data: {
            playerId?: number;
            roomInIndex?: number;
            isLock?: boolean;
        }): C_IsLock {
            const message = new C_IsLock({});
            if (data.playerId != null) {
                message.playerId = data.playerId;
            }
            if (data.roomInIndex != null) {
                message.roomInIndex = data.roomInIndex;
            }
            if (data.isLock != null) {
                message.isLock = data.isLock;
            }
            return message;
        }
        toObject() {
            const data: {
                playerId?: number;
                roomInIndex?: number;
                isLock?: boolean;
            } = {};
            if (this.playerId != null) {
                data.playerId = this.playerId;
            }
            if (this.roomInIndex != null) {
                data.roomInIndex = this.roomInIndex;
            }
            if (this.isLock != null) {
                data.isLock = this.isLock;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.playerId != 0)
                writer.writeInt32(1, this.playerId);
            if (this.roomInIndex != 0)
                writer.writeInt32(2, this.roomInIndex);
            if (this.isLock != false)
                writer.writeBool(3, this.isLock);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): C_IsLock {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new C_IsLock();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.playerId = reader.readInt32();
                        break;
                    case 2:
                        message.roomInIndex = reader.readInt32();
                        break;
                    case 3:
                        message.isLock = reader.readBool();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): C_IsLock {
            return C_IsLock.deserialize(bytes);
        }
    }
    export class S_IsLock extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            roomInfo?: RoomInfo;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("roomInfo" in data && data.roomInfo != undefined) {
                    this.roomInfo = data.roomInfo;
                }
            }
        }
        get roomInfo() {
            return pb_1.Message.getWrapperField(this, RoomInfo, 1) as RoomInfo;
        }
        set roomInfo(value: RoomInfo) {
            pb_1.Message.setWrapperField(this, 1, value);
        }
        get has_roomInfo() {
            return pb_1.Message.getField(this, 1) != null;
        }
        static fromObject(data: {
            roomInfo?: ReturnType<typeof RoomInfo.prototype.toObject>;
        }): S_IsLock {
            const message = new S_IsLock({});
            if (data.roomInfo != null) {
                message.roomInfo = RoomInfo.fromObject(data.roomInfo);
            }
            return message;
        }
        toObject() {
            const data: {
                roomInfo?: ReturnType<typeof RoomInfo.prototype.toObject>;
            } = {};
            if (this.roomInfo != null) {
                data.roomInfo = this.roomInfo.toObject();
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.has_roomInfo)
                writer.writeMessage(1, this.roomInfo, () => this.roomInfo.serialize(writer));
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): S_IsLock {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new S_IsLock();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        reader.readMessage(message.roomInfo, () => message.roomInfo = RoomInfo.deserialize(reader));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): S_IsLock {
            return S_IsLock.deserialize(bytes);
        }
    }
    export class C_Start extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            playerId?: number;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("playerId" in data && data.playerId != undefined) {
                    this.playerId = data.playerId;
                }
            }
        }
        get playerId() {
            return pb_1.Message.getFieldWithDefault(this, 1, 0) as number;
        }
        set playerId(value: number) {
            pb_1.Message.setField(this, 1, value);
        }
        static fromObject(data: {
            playerId?: number;
        }): C_Start {
            const message = new C_Start({});
            if (data.playerId != null) {
                message.playerId = data.playerId;
            }
            return message;
        }
        toObject() {
            const data: {
                playerId?: number;
            } = {};
            if (this.playerId != null) {
                data.playerId = this.playerId;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.playerId != 0)
                writer.writeInt32(1, this.playerId);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): C_Start {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new C_Start();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.playerId = reader.readInt32();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): C_Start {
            return C_Start.deserialize(bytes);
        }
    }
    export class S_Start extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            roomInfo?: RoomInfo;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("roomInfo" in data && data.roomInfo != undefined) {
                    this.roomInfo = data.roomInfo;
                }
            }
        }
        get roomInfo() {
            return pb_1.Message.getWrapperField(this, RoomInfo, 1) as RoomInfo;
        }
        set roomInfo(value: RoomInfo) {
            pb_1.Message.setWrapperField(this, 1, value);
        }
        get has_roomInfo() {
            return pb_1.Message.getField(this, 1) != null;
        }
        static fromObject(data: {
            roomInfo?: ReturnType<typeof RoomInfo.prototype.toObject>;
        }): S_Start {
            const message = new S_Start({});
            if (data.roomInfo != null) {
                message.roomInfo = RoomInfo.fromObject(data.roomInfo);
            }
            return message;
        }
        toObject() {
            const data: {
                roomInfo?: ReturnType<typeof RoomInfo.prototype.toObject>;
            } = {};
            if (this.roomInfo != null) {
                data.roomInfo = this.roomInfo.toObject();
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.has_roomInfo)
                writer.writeMessage(1, this.roomInfo, () => this.roomInfo.serialize(writer));
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): S_Start {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new S_Start();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        reader.readMessage(message.roomInfo, () => message.roomInfo = RoomInfo.deserialize(reader));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): S_Start {
            return S_Start.deserialize(bytes);
        }
    }
}
